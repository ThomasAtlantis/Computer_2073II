// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/16/2018 00:15:33"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    uart
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module uart_vlg_sample_tst(
	clk,
	enuart,
	reset,
	rxd,
	txd_cmd,
	uart_data_in,
	sampler_tx
);
input  clk;
input  enuart;
input  reset;
input  rxd;
input  txd_cmd;
input [7:0] uart_data_in;
output sampler_tx;

reg sample;
time current_time;
always @(clk or enuart or reset or rxd or txd_cmd or uart_data_in)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
    if ($realtime == 0 || $realtime != current_time)  
    begin                                             
        if (sample === 1'bx)                          
            sample = 0;                               
        else                                          
            sample = ~sample;                         
    end                                               
    current_time = $realtime;                         
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module uart_vlg_check_tst (
	r_ready,
	txd,
	txd_done,
	uart_data_out,
	sampler_rx
);
input  r_ready;
input  txd;
input  txd_done;
input [7:0] uart_data_out;
input sampler_rx;

reg  r_ready_expected;
reg  txd_expected;
reg  txd_done_expected;
reg [7:0] uart_data_out_expected;

reg  r_ready_prev;
reg  txd_prev;
reg  txd_done_prev;
reg [7:0] uart_data_out_prev;

reg  r_ready_expected_prev;
reg  txd_expected_prev;
reg  txd_done_expected_prev;
reg [7:0] uart_data_out_expected_prev;

reg  last_r_ready_exp;
reg  last_txd_exp;
reg  last_txd_done_exp;
reg [7:0] last_uart_data_out_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	r_ready_prev = r_ready;
	txd_prev = txd;
	txd_done_prev = txd_done;
	uart_data_out_prev = uart_data_out;
end

// update expected /o prevs

always @(trigger)
begin
	r_ready_expected_prev = r_ready_expected;
	txd_expected_prev = txd_expected;
	txd_done_expected_prev = txd_done_expected;
	uart_data_out_expected_prev = uart_data_out_expected;
end



// expected txd
initial
begin
	txd_expected = 1'bX;
end 

// expected txd_done
initial
begin
	txd_done_expected = 1'bX;
end 
// expected uart_data_out[ 7 ]
initial
begin
	uart_data_out_expected[7] = 1'bX;
end 
// expected uart_data_out[ 6 ]
initial
begin
	uart_data_out_expected[6] = 1'bX;
end 
// expected uart_data_out[ 5 ]
initial
begin
	uart_data_out_expected[5] = 1'bX;
end 
// expected uart_data_out[ 4 ]
initial
begin
	uart_data_out_expected[4] = 1'bX;
end 
// expected uart_data_out[ 3 ]
initial
begin
	uart_data_out_expected[3] = 1'bX;
end 
// expected uart_data_out[ 2 ]
initial
begin
	uart_data_out_expected[2] = 1'bX;
end 
// expected uart_data_out[ 1 ]
initial
begin
	uart_data_out_expected[1] = 1'bX;
end 
// expected uart_data_out[ 0 ]
initial
begin
	uart_data_out_expected[0] = 1'bX;
end 

// expected r_ready
initial
begin
	r_ready_expected = 1'bX;
end 
// generate trigger
always @(r_ready_expected or r_ready or txd_expected or txd or txd_done_expected or txd_done or uart_data_out_expected or uart_data_out)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected r_ready = %b | expected txd = %b | expected txd_done = %b | expected uart_data_out = %b | ",r_ready_expected_prev,txd_expected_prev,txd_done_expected_prev,uart_data_out_expected_prev);
	$display("| real r_ready = %b | real txd = %b | real txd_done = %b | real uart_data_out = %b | ",r_ready_prev,txd_prev,txd_done_prev,uart_data_out_prev);
`endif
	if (
		( r_ready_expected_prev !== 1'bx ) && ( r_ready_prev !== r_ready_expected_prev )
		&& ((r_ready_expected_prev !== last_r_ready_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r_ready :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r_ready_expected_prev);
		$display ("     Real value = %b", r_ready_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_r_ready_exp = r_ready_expected_prev;
	end
	if (
		( txd_expected_prev !== 1'bx ) && ( txd_prev !== txd_expected_prev )
		&& ((txd_expected_prev !== last_txd_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port txd :: @time = %t",  $realtime);
		$display ("     Expected value = %b", txd_expected_prev);
		$display ("     Real value = %b", txd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_txd_exp = txd_expected_prev;
	end
	if (
		( txd_done_expected_prev !== 1'bx ) && ( txd_done_prev !== txd_done_expected_prev )
		&& ((txd_done_expected_prev !== last_txd_done_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port txd_done :: @time = %t",  $realtime);
		$display ("     Expected value = %b", txd_done_expected_prev);
		$display ("     Real value = %b", txd_done_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_txd_done_exp = txd_done_expected_prev;
	end
	if (
		( uart_data_out_expected_prev[0] !== 1'bx ) && ( uart_data_out_prev[0] !== uart_data_out_expected_prev[0] )
		&& ((uart_data_out_expected_prev[0] !== last_uart_data_out_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port uart_data_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", uart_data_out_expected_prev);
		$display ("     Real value = %b", uart_data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_uart_data_out_exp[0] = uart_data_out_expected_prev[0];
	end
	if (
		( uart_data_out_expected_prev[1] !== 1'bx ) && ( uart_data_out_prev[1] !== uart_data_out_expected_prev[1] )
		&& ((uart_data_out_expected_prev[1] !== last_uart_data_out_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port uart_data_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", uart_data_out_expected_prev);
		$display ("     Real value = %b", uart_data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_uart_data_out_exp[1] = uart_data_out_expected_prev[1];
	end
	if (
		( uart_data_out_expected_prev[2] !== 1'bx ) && ( uart_data_out_prev[2] !== uart_data_out_expected_prev[2] )
		&& ((uart_data_out_expected_prev[2] !== last_uart_data_out_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port uart_data_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", uart_data_out_expected_prev);
		$display ("     Real value = %b", uart_data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_uart_data_out_exp[2] = uart_data_out_expected_prev[2];
	end
	if (
		( uart_data_out_expected_prev[3] !== 1'bx ) && ( uart_data_out_prev[3] !== uart_data_out_expected_prev[3] )
		&& ((uart_data_out_expected_prev[3] !== last_uart_data_out_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port uart_data_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", uart_data_out_expected_prev);
		$display ("     Real value = %b", uart_data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_uart_data_out_exp[3] = uart_data_out_expected_prev[3];
	end
	if (
		( uart_data_out_expected_prev[4] !== 1'bx ) && ( uart_data_out_prev[4] !== uart_data_out_expected_prev[4] )
		&& ((uart_data_out_expected_prev[4] !== last_uart_data_out_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port uart_data_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", uart_data_out_expected_prev);
		$display ("     Real value = %b", uart_data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_uart_data_out_exp[4] = uart_data_out_expected_prev[4];
	end
	if (
		( uart_data_out_expected_prev[5] !== 1'bx ) && ( uart_data_out_prev[5] !== uart_data_out_expected_prev[5] )
		&& ((uart_data_out_expected_prev[5] !== last_uart_data_out_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port uart_data_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", uart_data_out_expected_prev);
		$display ("     Real value = %b", uart_data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_uart_data_out_exp[5] = uart_data_out_expected_prev[5];
	end
	if (
		( uart_data_out_expected_prev[6] !== 1'bx ) && ( uart_data_out_prev[6] !== uart_data_out_expected_prev[6] )
		&& ((uart_data_out_expected_prev[6] !== last_uart_data_out_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port uart_data_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", uart_data_out_expected_prev);
		$display ("     Real value = %b", uart_data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_uart_data_out_exp[6] = uart_data_out_expected_prev[6];
	end
	if (
		( uart_data_out_expected_prev[7] !== 1'bx ) && ( uart_data_out_prev[7] !== uart_data_out_expected_prev[7] )
		&& ((uart_data_out_expected_prev[7] !== last_uart_data_out_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port uart_data_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", uart_data_out_expected_prev);
		$display ("     Real value = %b", uart_data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_uart_data_out_exp[7] = uart_data_out_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#50000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module uart_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg enuart;
reg reset;
reg rxd;
reg txd_cmd;
reg [7:0] uart_data_in;
// wires                                               
wire r_ready;
wire txd;
wire txd_done;
wire [7:0] uart_data_out;

wire sampler;                             

// assign statements (if any)                          
uart i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.enuart(enuart),
	.r_ready(r_ready),
	.reset(reset),
	.rxd(rxd),
	.txd(txd),
	.txd_cmd(txd_cmd),
	.txd_done(txd_done),
	.uart_data_in(uart_data_in),
	.uart_data_out(uart_data_out)
);

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// enuart
initial
begin
	enuart = 1'b1;
end 

// reset
initial
begin
	reset = 1'b0;
	reset = #3200000 1'b1;
	reset = #21600000 1'b0;
	reset = #800000 1'b1;
	reset = #24000000 1'b0;
end 

// rxd
initial
begin
	rxd = 1'b0;
end 

// txd_cmd
initial
begin
	txd_cmd = 1'b1;
	txd_cmd = #4000000 1'b0;
	txd_cmd = #20800000 1'b1;
	txd_cmd = #1600000 1'b0;
	txd_cmd = #23200000 1'b1;
end 
// uart_data_in[ 7 ]
initial
begin
	uart_data_in[7] = 1'b1;
end 
// uart_data_in[ 6 ]
initial
begin
	uart_data_in[6] = 1'b1;
end 
// uart_data_in[ 5 ]
initial
begin
	uart_data_in[5] = 1'b1;
end 
// uart_data_in[ 4 ]
initial
begin
	uart_data_in[4] = 1'b1;
end 
// uart_data_in[ 3 ]
initial
begin
	uart_data_in[3] = 1'b1;
end 
// uart_data_in[ 2 ]
initial
begin
	uart_data_in[2] = 1'b1;
end 
// uart_data_in[ 1 ]
initial
begin
	uart_data_in[1] = 1'b1;
end 
// uart_data_in[ 0 ]
initial
begin
	uart_data_in[0] = 1'b1;
end 

uart_vlg_sample_tst tb_sample (
	.clk(clk),
	.enuart(enuart),
	.reset(reset),
	.rxd(rxd),
	.txd_cmd(txd_cmd),
	.uart_data_in(uart_data_in),
	.sampler_tx(sampler)
);

uart_vlg_check_tst tb_out(
	.r_ready(r_ready),
	.txd(txd),
	.txd_done(txd_done),
	.uart_data_out(uart_data_out),
	.sampler_rx(sampler)
);
endmodule

